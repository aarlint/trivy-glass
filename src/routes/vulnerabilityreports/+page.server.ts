// File: trivy-glass/src/routes/vulnerabilityreports/+page.server.ts
import type { PageServerLoad } from './$types';
import { dev } from '$app/environment';
import { KubeConfig, CustomObjectsApi } from '@kubernetes/client-node';

export const csr = dev;
export const prerender = false;

export const load: PageServerLoad = async () => {
  const kc = new KubeConfig();
  let clusterName = 'Unknown Cluster'; // Initialize clusterName

  if (process.env.KUBERNETES_SERVICE_HOST && process.env.KUBERNETES_SERVICE_PORT) {
    console.log("Running in cluster; using in-cluster config");
    kc.loadFromCluster();
    clusterName = kc.getCurrentCluster()?.name || clusterName; // Get cluster name
  } else {
    console.log("Running outside cluster; loading kubeconfig");
    kc.loadFromDefault();
    clusterName = kc.getCurrentCluster()?.name || clusterName; // Get cluster name
  }

  const customObjectsApi = kc.makeApiClient(CustomObjectsApi);

  // CRD details for VulnerabilityReport
  const CRD_GROUP = 'aquasecurity.github.io';
  const CRD_VERSION = 'v1alpha1';
  const CRD_PLURAL = 'vulnerabilityreports';

  try {
    const result = await customObjectsApi.listCustomObjectForAllNamespaces({
      group: CRD_GROUP,
      version: CRD_VERSION,
      plural: CRD_PLURAL
    });
    const items = (result as any).items || [];
    const reports = items
    return { reports, clusterName }; // Include clusterName in returned data
  } catch (err: any) {
    return { reports: [], error: err.message, clusterName }; // Include clusterName in error case
  }
};